This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-10T06:36:45.699Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
src/
  components/
    Button.js
    Color.js
    Die.js
    DieFace.js
    Header.js
  constants/
    colorConstant.js
  App.css
  App.js
  index.html
  main.js
.gitignore
package.json
webpack.config.js

================================================================
Repository Files
================================================================

================
File: src/components/Button.js
================
import React from 'react';

export default function Button(props){

  function decideColor() {
    return (
      props.mode[props.color].darkShade
    )
  }
  
  return(
    <button 
      onClick={props.rollDice} 
      style={{backgroundColor: decideColor()}}
    >
      <span>{props.tenzies ? "Play Again" : "Roll"}</span>
    </button>
  );
}

================
File: src/components/Color.js
================
import React from "react";
import '../App.css'


export default function Color(props) {
 
  function renderColorOptions() {
    return props.mode.map(color => (
      <div 
        key={color.colorId}
        className={`color-mode ${color.color}`}
        onClick={() => props.setColor(color.colorId)}
      />
    ));
  }

  return (
    <section className="color-toggle-container">
    {renderColorOptions()}
    </section>
  )
}

================
File: src/components/Die.js
================
import React from 'react';
import DieFace from './DieFace'

export default function Die(props){
  //initialising a variable style with a DOM property of background color with a condition to render bg color based on the isHeld property
 
  const styles = {
    backgroundColor: props.isHeld
      ? props.mode[props.color].lightShade
      : "white"
  }
  return(
      <div className='die' style={styles} onClick={() => props.holdDie(props.id)}>
        <span className="die-num">
          <DieFace value={props.value}/> 
        </span>
      </div>
  )
}

//green color: "#59E391"

================
File: src/components/DieFace.js
================
import React from 'react'
import '../App.css'
import { nanoid } from 'nanoid'

export default function DieFace(props) {
  
  const dotsPosition = {
    1: [5],
    2: [1, 9],
    3: [1, 5, 9],
    4: [1, 3, 7, 9],
    5: [1, 3, 5, 7, 9],
    6: [1, 3, 4, 6, 7, 9]
  }

  const dots = dotsPosition[props.value].map(position => (
    <div className={`dot dot-${position}`} key={nanoid()} />
  ))

  return (
    <div className="dieFace">
      {dots}
    </div>
  )
}

================
File: src/components/Header.js
================
import React from 'react';

export default function Header(props){
  
  const styles = {
    color: props.mode[props.color].darkShade
  }
  return(
    <header>
        <h1 style={styles}>Tenzies</h1>
        <p>Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>
    </header>
  );
}

================
File: src/constants/colorConstant.js
================
import React from "react";

export const COLOR_CONSTANTS = [
  {
  color: "purple",
  colorId: 0,
  lightShade: "#C7B9FF",
  darkShade: "#7E4BFF"
  },
  {
  color: "green",
  colorId: 1,
  lightShade: "#59E391",
  darkShade: "#39863e"
  }
];

================
File: src/App.css
================
/* CSS Reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html, body {
  height: 100%;
}

ul, ol {
  list-style: none;
}

a {
  text-decoration: none;
  color: inherit;
}

img {
  max-width: 100%;
  height: auto;
}

button {
  background: none;
  border: none;
  cursor: pointer;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* Variables */
:root {
 --primary-color: #0B2434;
 --secondary-color: #F5F5F5;

--primary-ff-color:#2B283A;
--secondary-ff-color:#4A4E74;
--tertiary-ff-color:#59E391;

--button-color: #5035FF;

/* Typography */
--ff-primary: 'Karla', sans-serif;
--ff-secondary: 'Inter', sans-serif;

/* Font Sizes */
--fs-heading: 2rem;
--fs-body: 1rem;
--fs-number-keys: 1.2rem;
--fs-button:1rem;

/* Font Weights */
--fw-bold: 700;
--fw-regular: 400;

/* letter spacing */
--ls-heading: -0.048rem;
--ls-body: -0.024rem;
}

/* Custom Properties */

body{
  background-color: #E6E4E4;
  
  display: grid;
  place-items: center;
}

main{
  background-color: var(--secondary-color);
  
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0 auto;

  width: min(100%, 320px);
  
  padding: 2rem;
  border-radius: 0.63rem;
}

header{
  display: flex;
  flex-direction: column;
  align-items: center;

  gap: 0.48rem;
}

header > h1{
  font-size: var(--fs-heading);
  letter-spacing: var(--ls-heading);
  color: var(--primary-ff-color);
  font-weight: var(--fw-bold);
  font-family: var(--ff-primary);
}

header > p{
  font-family: var(--ff-secondary);
  font-size: var(--fs-body);
  letter-spacing: var(--ls-body);
  color: var(--secondary-ff-color);
  font-weight: var(--fw-regular);
  text-align: center;
}

section{
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 1.25rem;

  margin: 1.5rem 0;
}

.die{
  background-color: #FFF;
  width: 42px;
  height: 42px;
  border-radius: 0.25rem;
  box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.35);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}

.die-num{
  font-size: var(--fs-number-keys);
  font-weight: var(--fw-bold);
  font-family: var(--ff-primary);
  color: var(--primary-ff-color);
}

button{
  background-color: var(--button-color);
  padding: 0.6rem 1.6rem;
  border-radius: 0.25rem;
  box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.15);

  max-width: 100%;
 
  height: auto;
  cursor: pointer;
}

span{
  font-family: var(--ff-primary);
  font-size: var(--fs-button);
  color: #FFF;
  font-weight: var(--fw-bold);
}

.dieFace{
  width: 46px;
  height: 44px;
  border-radius: 0.25rem;
  
  display: grid;
  grid-template: repeat(3, 1fr) / repeat(3, 1fr);
  cursor: pointer;
  padding: 5px;
  gap: 4px;
}

.dot{
  width: 8px;
  height: 8px;
  border-radius: 99%;
  background-color: black;
}

.dot-1 { grid-area: 1 / 1; }  /* top-left */
.dot-2 { grid-area: 1 / 2; }  /* top-center */
.dot-3 { grid-area: 1 / 3; }  /* top-right */
.dot-4 { grid-area: 2 / 1; }  /* middle-left */
.dot-5 { grid-area: 2 / 2; }  /* center */
.dot-6 { grid-area: 2 / 3; }  /* middle-right */
.dot-7 { grid-area: 3 / 1; }  /* bottom-left */
.dot-8 { grid-area: 3 / 2; }  /* bottom-center */
.dot-9 { grid-area: 3 / 3; }  /* bottom-right */

.color-toggle-container{
  display: flex;
  gap: 12px;
  margin: 0 0 1rem 0;
}

.color-mode{
  width: 2rem;
  height: 2rem;
  border-radius: 99%;
  cursor: pointer;
}
.color-mode:active,
.color-mode:hover {
  box-shadow: 0 0 8px 2px rgba(0, 0, 0, 0.25);
}
.purple{
  background-color: #C7B9FF;
}
.green {
  background-color: #59E391;
}

================
File: src/App.js
================
import React, { useState, useEffect } from 'react';
import useWindowSize from 'react-use/lib/useWindowSize'
import './App.css';
import Header from './components/Header';
import Die from './components/Die';
import Button from './components/Button';
import { nanoid } from 'nanoid';
import Confetti from 'react-confetti'
import Color from './components/Color'
import { COLOR_CONSTANTS } from './constants/colorConstant';

export default function App() {

  //initialising state to have info about the game
  const [game, setGame] = useState({
    dice: generateRandomDiceNumbers(),
    tenzies: false,
    rolls: 0,
    mode: COLOR_CONSTANTS
  })

  //initializing state to toggle the color of the game 
  const[color, setColor] = useState(0)

  //initializing variables to get the width and height of the window size 
  const {width, height} = useWindowSize()

  //initializing a useEffect with the dice dependency to check if the user has satisfied all conditions for the game to declare them a winner or not 
  useEffect(() => {
    const allHeld = game.dice.every(die => die.isHeld)
    const allValues = game.dice.every(die => die.value === game.dice[0].value)
    
    if(allHeld && allValues){
      setGame(prevGame => ({
        ...prevGame,
        tenzies: true
      }))
    }
    
  }, [game.dice])

  //function to create a new die
  function generateNewDie() {
    return {
      value: Math.floor((Math.random() * 6) + 1),
      isHeld: false,
      key: nanoid()
    }
  }

  //generating ten random number objects, and then pushing them into the newArray 
  function generateRandomDiceNumbers(){
    const newArray = []
    for(let i = 0; i < 10; i++){
      //initialising a new object with three properties, each object represents a number 
      newArray.push(generateNewDie())
    }
    return newArray;
  }
  
  //initializing a custom element dieElements to map over each element in the dice state 
  const dieElements = game.dice.map(die => 
    (<Die 
      //passing the each item(die) in the array as the value to every die component being rendered
      value={die.value}
      key={die.key} 
      id={die.key}
      isHeld={die.isHeld}
      holdDie={holdDie}
      mode={game.mode}
      color={color}
      />
     ))
  
  // initializing a function rollDice to generate a new array of numbers, and then updating the state
  function rollDice() {
    if(game.tenzies) {
      setGame(prevState => ({
        ...prevState,
        dice: generateRandomDiceNumbers(),
        tenzies: false
      }))
    }
    else {
      setGame(prevSate => ({
        ...prevSate,
        dice: prevSate.dice.map(die => {
          return die.isHeld ? die : generateNewDie()
        })
      }))
    }
  }
  
  //holdDie is a function to change the isHeld property in the state of that particular die component which is being clicked
  function holdDie(id) {
    setGame(prevSate => ({
      ...prevSate,
      dice: prevSate.dice.map(die => {
        if(die.key === id){
          return {...die, isHeld: !die.isHeld}
        }else {
          return die
        }
      })
    }))
  }

  return(
    <>
    <main>
    <Color 
    mode={game.mode}
    setColor={setColor}
    />
      {game.tenzies ? <Confetti 
        width={width}
        height={height}
      /> : ""}
      <Header 
        mode={game.mode}
        color={color}
      />
      <section className='dice-container'>
          {dieElements}
      </section>
      <Button 
        rollDice={rollDice}
        tenzies={game.tenzies}
        mode={game.mode}
        color={color}
      />
    </main>
    </>
  );
}

================
File: src/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tenzies Game</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>

================
File: src/main.js
================
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './App.css';

const container = document.getElementById('root');
const root = createRoot(container);
root.render(<App />);

================
File: .gitignore
================
node_modules
.DS_Store
dist

================
File: package.json
================
{
  "name": "tenzies-game",
  "version": "1.0.0",
  "description": "A game of dice built with React",
  "main": "main.js",
  "babel": {
    "presets": [
      "@babel/preset-env",
      "@babel/preset-react"
    ]
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "create": "webpack",
    "start": "webpack-dev-server --open --hot"
  },
  "keywords": [],
  "author": "Shivam Agarwal",
  "license": "ISC",
  "dependencies": {
    "nanoid": "^5.0.8",
    "react": "^18.3.1",
    "react-confetti": "^6.1.0",
    "react-dom": "^18.3.1",
    "react-use": "^17.5.1"
  },
  "devDependencies": {
    "@babel/core": "^7.26.0",
    "@babel/preset-env": "^7.26.0",
    "@babel/preset-react": "^7.25.9",
    "babel-loader": "^9.2.1",
    "css-loader": "^7.1.2",
    "html-webpack-plugin": "^5.6.3",
    "style-loader": "^4.0.0",
    "webpack": "^5.96.1",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^4.15.1"
  }
}

================
File: webpack.config.js
================
// Import the path module from Node.js to handle file paths
var path = require('path');
// Import the HTML Webpack Plugin to create an HTML file that includes all webpack bundles
var HtmlWebpackPlugin = require('html-webpack-plugin');

// Export the webpack configuration object
module.exports = {
    // Entry point of the app, where webpack starts bundling
    entry: './src/main.js',
    
    // Configure how and where webpack will output the bundles
    output: {
        // Name of the output bundle file
        filename: 'main_bundle.js',
        // Absolute path where bundles will be output
        // __dirname is the current directory, 'dist' is the target folder
        path: path.resolve(__dirname, 'dist')
    },
    
    // Configure how different types of modules will be handled
    module : {
      // Array of rules for module handling
      rules : [
          // Rule for JavaScript files
          // Uses babel-loader to convert modern JS to browser-compatible JS
          {test : /\.(js)$/, use:'babel-loader'},
          
          // Rule for CSS files
          // Uses style-loader to inject CSS into the DOM
          // Uses css-loader to handle CSS imports
          {test : /\.css$/, use:['style-loader', 'css-loader']}
      ]
    },
    
    // Set webpack mode to development for easier debugging
    // In production, this would be set to 'production' for optimization
    mode:'development',
    
    // Array of plugins to extend webpack's capabilities
    plugins : [
        // Creates an HTML file with the correct bundles injected
        // Uses the template from src/index.html
        new HtmlWebpackPlugin ({
          template : 'src/index.html'
      })
  ]
}
